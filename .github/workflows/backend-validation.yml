name: Backend Validation

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'src/app/**'
      - 'src/database/**'
      - 'src/routes/**'
      - 'src/config/**'
      - 'src/tests/**'
      - 'src/composer.json'
      - 'src/composer.lock'
      - 'src/phpunit.xml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/app/**'
      - 'src/database/**'
      - 'src/routes/**'
      - 'src/config/**'
      - 'src/tests/**'
      - 'src/composer.json'
      - 'src/composer.lock'
      - 'src/phpunit.xml'

# Definir permissões mínimas necessárias
permissions:
  contents: read

jobs:
  backend-validation:
    runs-on: ubuntu-latest

    # Timeout para evitar jobs infinitos
    timeout-minutes: 20

    defaults:
      run:
        working-directory: ./src

    strategy:
      matrix:
        php-version: [8.2, 8.3, 8.4]
      # Falha rápida se uma versão falhar  
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Limitar profundidade do histórico por segurança
          fetch-depth: 1

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug
          # Configurações de segurança do PHP
          ini-values: |
            memory_limit=256M
            max_execution_time=60
            expose_php=Off
            display_errors=Off

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Run composer security audit
        run: composer audit

      - name: Install composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction --no-dev

      - name: Install dev dependencies  
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate --no-interaction

      - name: Create SQLite database
        run: touch database/database.sqlite

      - name: Set database permissions (secure)
        run: chmod 644 database/database.sqlite

      - name: Run database migrations
        run: php artisan migrate --force --no-interaction

      - name: Check code style with Laravel Pint
        run: ./vendor/bin/pint --test

      - name: Run PHPStan static analysis (if configured)
        continue-on-error: true
        run: |
          if [ -f phpstan.neon ] || [ -f phpstan.neon.dist ]; then
            ./vendor/bin/phpstan analyse --no-progress --memory-limit=256M
          else
            echo "PHPStan configuration not found, skipping static analysis"
          fi

      - name: Run tests with Pest
        run: php artisan test --coverage --min=80 --stop-on-failure

      - name: Clear application cache
        run: php artisan cache:clear
